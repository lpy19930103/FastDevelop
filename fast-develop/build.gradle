apply plugin: 'com.android.application'

android {
    compileSdkVersion allprojectCompileSdkVersion
    buildToolsVersion allprojectBuildToolsVersion

    // 默认版本号和code
    def verCode = 1000000
    def verName = "1.0.0"

    // 基本编译选项
    defaultConfig {
        applicationId "com.lipy.fastdevelop"
        minSdkVersion 16
        targetSdkVersion 19
        versionCode getVerCode(verCode)
        versionName getVerName(verName)
    }

    lintOptions {
        abortOnError false
    }

    // 修改编译默认路径
    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src']
            resources.srcDirs = ['src']
            aidl.srcDirs = ['src']
            renderscript.srcDirs = ['src']
            res.srcDirs = ['res']
            assets.srcDirs = ['assets']
            jniLibs.srcDirs = ['libs']
        }

        // Move the tests to tests/java, tests/res, etc...
        instrumentTest.setRoot('tests')

        // Move the build types to build-types/<type>
        // For instance, build-types/debug/java, build-types/debug/AndroidManifest.xml, ...
        // This moves them out of them default location under src/<type>/... which would
        // conflict with src/ being used by the main source set.
        // Adding new build types or product flavors should be accompanied
        // by a similar customization.
        debug.setRoot('build-types/debug')
//        release.setRoot('build-types/release')
    }

    // 指定签名文件
    signingConfigs {
        debug {
//            storeFile file('fastdevelop_test.keystore')
//            storePassword "1234567890"
//            keyAlias 'fastdevelop.keystore'
//            keyPassword "1234567890"
        }
        release {
//            storeFile file(getReleaseSignFile())
//            storePassword getReleaseSignStorePassword()
//            keyAlias getReleaseSignKeyAlias()
//            keyPassword getReleaseSignKeyPassword()
        }
    }

    buildTypes {
        debug {
            minifyEnabled false
            proguardFile 'proguard_debug.cfg'
//            signingConfig signingConfigs.debug
        }
        release {
            minifyEnabled true
            proguardFile 'proguard.cfg'
//            proguardFile getDefaultProguardFile('proguard-android.txt')
//            signingConfig signingConfigs.release
        }
    }

    productFlavors {
        // default channelId
        "105" {
            manifestPlaceholders = [CHANNEL_NAME: "105"]
        }

        // get channelId from variants
        channels().each { name ->
            "$name" {
                manifestPlaceholders = [CHANNEL_NAME: name]
            }
        }

        // get channelId from file
        channelsFromFile().each { name ->
            "$name" {
                manifestPlaceholders = [CHANNEL_NAME: name]
            }
        }

    }

    //修改生成的apk名字
    android.applicationVariants.all { variant ->
        variant.outputs.each { output ->
            def oldFile = output.outputFile
            def newName = '';
            if (variant.buildType.name.equals('release')) {
                // APK输出文件名规则：EGFBankP2B_v + verName + channelId + _ +date + _Android_release
                def releaseApkName = 'fastdevelop' + versionName + '_' +
                        variant.productFlavors[0].name + "_" + getDate() + '_Android_' +
                        getSuffix() + '.apk'
                output.outputFile = new File(oldFile.parent, releaseApkName)
            }
            if (variant.buildType.name.equals('beta')) {
            }
            if (variant.buildType.name.equals('debug')) {

            }
        }
    }

}



//获取版本号versionName
def getVerName(String name) {
    def ver = name
    if (project.hasProperty('vername')) {
        println 'vername:' + vername
        ver = vername;
    }

    return ver
}

//获取版本号versionCode
def getVerCode(int code) {
    int c = code
    if (project.hasProperty('vercode')) {
        println 'vercode:' + vercode
        c = Integer.valueOf(vercode)
    }

    return c
}

// 获取签名文件名
def getReleaseSignFile() {
    String signFile = 'fastdevelop_test.keystore';
    if (project.hasProperty('rsfile')) {
        signFile = rsfile;
    }

    return signFile
}

// 获取签名文件的存储密码
def getReleaseSignStorePassword() {
    def storePassword = "1234567890"
    if (project.hasProperty('rspassword')) {
        storePassword = rspassword
    }

    return storePassword
}

// 获取签名文件中的签名别名
def getReleaseSignKeyAlias() {
    def keyAlias = "fastdevelop.keystore"
    if (project.hasProperty('rskeyalias')) {
        keyAlias = rskeyalias
    }

    return keyAlias
}

// 获取签名文件的签名密码
def getReleaseSignKeyPassword() {
    def keyPassword = "1234567890"
    if (project.hasProperty('rskeypassword')) {
        keyPassword = rskeypassword
    }

    return keyPassword
}

//获取时间戳
def getDate() {
    def date = new Date()
    def formattedDate = date.format('yyyyMMdd')
    return formattedDate
}

// 多渠道打包 
def channels() {
    String[] channelIds
    if (project.hasProperty('channels')) {
        println '------setup flavors ---------------'
        println 'channels:' + channels
        channelIds = channels.split(',')
        channelIds.each { ch ->
            println ch
        }

    }

    return channelIds
}

// 从文件channels.txt中读取渠道号
def channelsFromFile() {
    String[] channelIds
    if (project.hasProperty('channelsFile')) {
        println '------setup flavors ---------------'
        def path = './channels.txt'
        String str = ''
        file(path).eachLine { line ->
            // 以#开头的是不需要在编译出对应的apk包的渠道号，这些渠道可以通过加固时产生
            if (!line.contains('#')) {
                str += line + ','
            }
        }

        println 'channels:' + str
        if (str.length() > 0) {
            str = str.substring(0, str.length() - 1)
            channelIds = str.split(',')
        }

        channelIds.each { ch ->
            println ch
        }

    }

    return channelIds
}

// 包名后缀 
def getSuffix() {
    def strSuffix = ''

    if (project.hasProperty('suf')) {
        strSuffix = suf;
    }

    if(strSuffix.length() < 1) {
        strSuffix = 'release'
    }

    return strSuffix
}

dependencies {
    compile fileTree(dir: '../libs', include: ['*.jar'])
    compile 'com.google.android:support-v4:r7'
    compile 'com.google.code.gson:gson:2.2.4'
    compile 'com.loopj.android:android-async-http:1.4.4'
    compile 'com.nostra13.universalimageloader:universal-image-loader:1.9.5'
}
